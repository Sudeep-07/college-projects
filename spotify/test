                    <!-- <button data-testid="play-button" aria-label="Play Happy Hits!" data-encore-id="buttonPrimary" data-is-icon-only="true" class="Button-sc-qlcn5g-0 dlTJiR" style="--triangle-light-image: url(https://open.spotifycdn.com/cdn/images/FC24_Spotify_PlayButton_V2_TriangleLight.74659c50.svg);"><span class="ButtonInner-sc-14ud5tc-0 hKFGwn encore-bright-accent-set"><span aria-hidden="true" class="IconWrapper__Wrapper-sc-1hf1hjl-0 ivomLs"><svg data-encore-id="icon" role="img" aria-hidden="true" viewBox="0 0 24 24" class="Svg-sc-ytk21e-0 bneLcE"><path d="m7.05 3.606 13.49 7.788a.7.7 0 0 1 0 1.212L7.05 20.394A.7.7 0 0 1 6 19.788V4.212a.7.7 0 0 1 1.05-.606z"></path></svg></span></span></button>
                    // Global Audio object and state
let currentSong = new Audio();
let currentlyPlayingElement = null;

// to know the duration improvised version  
// const secondsToMinutesSeconds = (seconds) => {
//     if (isNaN(seconds) || seconds < 0) return "Invalid input";

//     const [minutes, remainingSeconds] = [Math.floor(seconds / 60), seconds % 60];
//     return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
// };

// to know the duration 

function secondsToMinutesSeconds(seconds){
    if(isNaN(seconds) || seconds < 0) {
        return "Invalid input";
    }

    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);

    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2,'0');

    return `${formattedMinutes}:${formattedSeconds}`;
}

// Fetch songs from the server
const getSongs = async () => {
    const response = await fetch("./songs");
    const text = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(text, "text/html");

    return Array.from(doc.querySelectorAll("a"))
        .filter(a => a.href.endsWith(".mp3"))
        .map(a => {
            const [name, artist] = decodeURIComponent(a.href.split("/songs/")[1])
                .replace(".mp3", "")
                .split(" - ")
                .map(item => item.trim());
            return { name: name || "Unknown Song", artist: artist || "Unknown Artist", url: a.href.split("/songs/")[1] };
        });
};

// Update UI for play/pause
const updateUI = (element, track = "") => {
    document.querySelectorAll(".playnow img").forEach(img => (img.src = "play.svg"));
    document.querySelector("#play").src = currentSong.paused ? "play.svg" : "pause.svg";

    if (!currentSong.paused) {
        element.querySelector(".playnow img").src = "pause.svg";

        // Decode the track name and remove the file extension
        const decodedTrack = decodeURIComponent(track).replace(".mp3", "");
        document.querySelector(".songinfo").textContent = decodedTrack;

        document.querySelector(".songtime").textContent = "00:00 / 00:00";
    }
};

// Toggle song playback
const togglePlayback = (song, element) => {
    if (currentlyPlayingElement === element) {
        currentSong.paused ? currentSong.play() : currentSong.pause();
    } else {
        currentSong.src = `./songs/${song.url}`;
        currentSong.play();
        currentlyPlayingElement = element;
    }
    updateUI(element, song.url);
};

// Initialize playlist and events
const main = async () => {
    const songs = await getSongs();
    const songList = document.querySelector(".songList ul");

    songs.forEach(song => {
        const li = document.createElement("li");
        li.innerHTML = `
            <img class="invert" width="34" src="music.svg" alt="">
            <div class="info">
                <div>${song.name}</div>
                <div>${song.artist}</div>
            </div>
            <div class="playnow">
                <span>Play Now</span>
                <img src="play.svg" alt="" class="invert">
            </div>
        `;
        li.addEventListener("click", () => togglePlayback(song, li));
        songList.appendChild(li);
    });

    // Global play/pause button
    document.querySelector("#play").addEventListener("click", () => {
        if (currentlyPlayingElement) {
            currentSong.paused ? currentSong.play() : currentSong.pause();
            updateUI(currentlyPlayingElement, currentSong.src.split("/songs/")[1]);
        }
    });

    // listen for timeupdate event
    currentSong.addEventListener("timeupdate", ()=>{
        console.log(currentSong.currentTime, currentSong.duration);
        document.querySelector(".songtime").innerHTML = `${secondsToMinutesSeconds(currentSong.currentTime)}
        /${secondsToMinutesSeconds(currentSong.duration)}`
    });
};

main(); -->






// Global Audio object and state
let currentSong = new Audio();
let currentlyPlayingElement = null;
let currentSongIndex = -1;
let songs = []; // Store songs

// Function to convert seconds to minutes and seconds
const secondsToMinutesSeconds = (seconds) => {
    if (isNaN(seconds) || seconds < 0) {
        return "00:00";
    }
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2, '0');
    return `${formattedMinutes}:${formattedSeconds}`;
};

// Fetch songs from the server and strip folder names from the song path
const getSongs = async (folder = '') => {
    const response = await fetch(`./songs/${folder}`);
    const text = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(text, "text/html");

    return Array.from(doc.querySelectorAll("a"))
        .filter(a => a.href.endsWith(".mp3"))
        .map(a => {
            // Extract song name and artist from the file path (remove folder names)
            const songPath = a.href.split("/songs/")[1];
            const [name, artist] = decodeURIComponent(songPath)
                .replace(".mp3", "")
                .replace(/_/g, " ") // Replace underscores with spaces
                .split(" - ") // Split by hyphen to get name and artist
                .map(item => item.trim());

            return { name: name || "Unknown Song", artist: artist || "", url: songPath };
        });
};

// Update UI for play/pause button
const updateUI = (element, track = "") => {
    // Reset play buttons and update the current one
    document.querySelectorAll(".playnow img").forEach(img => (img.src = "play.svg"));
    document.querySelector("#play").src = currentSong.paused ? "play.svg" : "pause.svg";

    if (!currentSong.paused) {
        element.querySelector(".playnow img").src = "pause.svg";

        // Decode the track name and remove the file extension
        const decodedTrack = decodeURIComponent(track).replace(".mp3", "").replace(/_/g, " ");
        document.querySelector(".songinfo").textContent = decodedTrack;

        document.querySelector(".songtime").textContent = "00:00 / 00:00";
    }
};

// Play a song by index
const playSongByIndex = (index) => {
    if (index >= 0 && index < songs.length) {
        const song = songs[index];
        currentSong.src = `./songs/${song.url}`;
        currentSong.play();
        currentSongIndex = index;

        // Update currently playing element
        const songList = document.querySelector(".songList ul");
        currentlyPlayingElement = songList.children[index];

        // Update UI
        updateUI(currentlyPlayingElement, song.url);
    }
};

// Toggle song playback
const togglePlayback = (song, element) => {
    if (currentlyPlayingElement === element) {
        currentSong.paused ? currentSong.play() : currentSong.pause();
    } else {
        currentSong.src = `./songs/${song.url}`;
        currentSong.play();
        currentlyPlayingElement = element;
        currentSongIndex = Array.from(element.parentNode.children).indexOf(element); // Update index
    }
    updateUI(element, song.url);
};

// Initialize playlist and events
const main = async () => {
    const cardElements = document.querySelectorAll(".card");
    const songList = document.querySelector(".songList ul");

    // Add event listeners for each card
    cardElements.forEach(card => {
        card.addEventListener("click", async () => {
            const folder = card.getAttribute("data-folder"); // Get folder name from the card's data attribute
            songs = await getSongs(folder); // Get songs from folder

            // Clear existing songs
            songList.innerHTML = '';

            songs.forEach(song => {
                const li = document.createElement("li");
                li.innerHTML = `
                    <img class="invert" width="34" src="music.svg" alt="">
                    <div class="info">
                        <div>${song.name}</div>
                        <div>${song.artist}</div> <!-- Display artist only if available -->
                    </div>
                    <div class="playnow">
                        <span>Play Now</span>
                        <img src="play.svg" alt="" class="invert">
                    </div>
                `;
                li.addEventListener("click", () => togglePlayback(song, li));
                songList.appendChild(li);
            });

            // Reset to the first song when a new folder is selected
            if (songs.length > 0) {
                currentSongIndex = 0;
                currentlyPlayingElement = songList.children[0];
                currentSong.src = `./songs/${songs[currentSongIndex].url}`;
                updateUI(currentlyPlayingElement, songs[currentSongIndex].url); // Ensure play button shows correctly
                document.querySelector("#play").src = "play.svg"; // Show play button initially
            }
        });
    });

    // Global play/pause button
    const playButton = document.querySelector("#play");
    playButton.addEventListener("click", () => {
        if (currentSong.paused) {
            currentSong.play();
            playButton.src = "pause.svg"; // Change button to pause icon
        } else {
            currentSong.pause();
            playButton.src = "play.svg"; // Change button to play icon
        }
        updateUI(currentlyPlayingElement, currentSong.src.split("/songs/")[1]);
    });

    // Time update event
    currentSong.addEventListener("timeupdate", () => {
        document.querySelector(".songtime").innerHTML = `${secondsToMinutesSeconds(currentSong.currentTime)}
        /${secondsToMinutesSeconds(currentSong.duration)}`;
        document.querySelector(".circle").style.left = (currentSong.currentTime / currentSong.duration) * 100 + "%";
    });

    // Seekbar interaction
    document.querySelector(".seekbar").addEventListener("click", e => {
        let percent = (e.offsetX / e.target.getBoundingClientRect().width) * 100;
        document.querySelector(".circle").style.left = percent + "%";
        currentSong.currentTime = ((currentSong.duration) * percent) / 100;
    });

    // Previous Song
    document.querySelector("#prevsong").addEventListener("click", () => {
        if (currentSongIndex > 0) {
            playSongByIndex(currentSongIndex - 1);
        }
    });

    // Next Song
    document.querySelector("#nextsong").addEventListener("click", () => {
        if (currentSongIndex < songs.length - 1) {
            playSongByIndex(currentSongIndex + 1);
        }
    });

    // Volume range and keyboard sync
    const volumeInput = document.querySelector(".range input");
    volumeInput.addEventListener("input", (e) => {
        const volume = e.target.value / 100;
        currentSong.volume = volume;
    });

    // Update volume slider when volume changes from keyboard
    currentSong.addEventListener("volumechange", () => {
        volumeInput.value = currentSong.volume * 100;
    });

    // Handle song ended
    currentSong.addEventListener("ended", () => {
        if (currentSongIndex < songs.length - 1) {
            playSongByIndex(currentSongIndex + 1); // Play the next song
        } else {
            // If the last song ends, reset to the first song and stop playback
            currentSongIndex = 0;
            playButton.src = "play.svg";
            currentSong.pause();
            currentSong.src = `./songs/${songs[currentSongIndex].url}`;
            updateUI(songList.children[currentSongIndex], songs[currentSongIndex].url);
        }
    });

    // Hamburger menu
    document.querySelector(".hamburger").addEventListener("click", () => {
        document.querySelector(".left").style.left = "0";
    });

    document.querySelector(".close").addEventListener("click", () => {
        document.querySelector(".left").style.left = "-120%";
    });
};

// Call main function on page load
main();

















async function displayAlbums() {
    console.log("Displaying albums...");
    let a = await fetch(`/songs/`);  // Fetch all albums/folders
    let response = await a.text();
    let div = document.createElement("div");
    div.innerHTML = response;
    let anchors = div.getElementsByTagName("a");
    let cardContainer = document.querySelector(".cardContainer");
    let array = Array.from(anchors);
    
    for (let index = 0; index < array.length; index++) {
        const e = array[index];
        if (e.href.includes("/songs") && !e.href.includes(".htaccess")) {
            let folder = e.href.split("/").slice(-2)[0];
            
            // Fetch the metadata for each folder
            let metadata = await fetch(`/songs/${folder}/info.json`);
            let response = await metadata.json();
            
            // Create card for each album/folder
            cardContainer.innerHTML += `
                <div data-folder="${folder}" class="card">
                    <div class="play">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none"
                            xmlns="http://www.w3.org/2000/svg">
                            <path d="M5 20V4L19 12L5 20Z" stroke="#141B34" fill="#000" stroke-width="1.5"
                                stroke-linejoin="round" />
                        </svg>
                    </div>
                    <img src="/songs/${folder}/cover.jpg" alt="">
                    <h2>${response.title}</h2>
                    <p>${response.description}</p>
                </div>`;
        }
    }

    // Add event listeners to load songs when card is clicked
    Array.from(document.getElementsByClassName("card")).forEach(e => {
        e.addEventListener("click", async item => {
            console.log("Fetching songs for folder...");
            songs = await getSongs(`songs/${item.currentTarget.dataset.folder}`);
            playMusic(songs[0]);  // Play the first song in the folder
        });
    });
}