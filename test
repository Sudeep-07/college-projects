                    <button data-testid="play-button" aria-label="Play Happy Hits!" data-encore-id="buttonPrimary" data-is-icon-only="true" class="Button-sc-qlcn5g-0 dlTJiR" style="--triangle-light-image: url(https://open.spotifycdn.com/cdn/images/FC24_Spotify_PlayButton_V2_TriangleLight.74659c50.svg);"><span class="ButtonInner-sc-14ud5tc-0 hKFGwn encore-bright-accent-set"><span aria-hidden="true" class="IconWrapper__Wrapper-sc-1hf1hjl-0 ivomLs"><svg data-encore-id="icon" role="img" aria-hidden="true" viewBox="0 0 24 24" class="Svg-sc-ytk21e-0 bneLcE"><path d="m7.05 3.606 13.49 7.788a.7.7 0 0 1 0 1.212L7.05 20.394A.7.7 0 0 1 6 19.788V4.212a.7.7 0 0 1 1.05-.606z"></path></svg></span></span></button>
                    // Global Audio object and state
let currentSong = new Audio();
let currentlyPlayingElement = null;

// to know the duration improvised version  
// const secondsToMinutesSeconds = (seconds) => {
//     if (isNaN(seconds) || seconds < 0) return "Invalid input";

//     const [minutes, remainingSeconds] = [Math.floor(seconds / 60), seconds % 60];
//     return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
// };

// to know the duration 

function secondsToMinutesSeconds(seconds){
    if(isNaN(seconds) || seconds < 0) {
        return "Invalid input";
    }

    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);

    const formattedMinutes = String(minutes).padStart(2, '0');
    const formattedSeconds = String(remainingSeconds).padStart(2,'0');

    return `${formattedMinutes}:${formattedSeconds}`;
}

// Fetch songs from the server
const getSongs = async () => {
    const response = await fetch("./songs");
    const text = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(text, "text/html");

    return Array.from(doc.querySelectorAll("a"))
        .filter(a => a.href.endsWith(".mp3"))
        .map(a => {
            const [name, artist] = decodeURIComponent(a.href.split("/songs/")[1])
                .replace(".mp3", "")
                .split(" - ")
                .map(item => item.trim());
            return { name: name || "Unknown Song", artist: artist || "Unknown Artist", url: a.href.split("/songs/")[1] };
        });
};

// Update UI for play/pause
const updateUI = (element, track = "") => {
    document.querySelectorAll(".playnow img").forEach(img => (img.src = "play.svg"));
    document.querySelector("#play").src = currentSong.paused ? "play.svg" : "pause.svg";

    if (!currentSong.paused) {
        element.querySelector(".playnow img").src = "pause.svg";

        // Decode the track name and remove the file extension
        const decodedTrack = decodeURIComponent(track).replace(".mp3", "");
        document.querySelector(".songinfo").textContent = decodedTrack;

        document.querySelector(".songtime").textContent = "00:00 / 00:00";
    }
};

// Toggle song playback
const togglePlayback = (song, element) => {
    if (currentlyPlayingElement === element) {
        currentSong.paused ? currentSong.play() : currentSong.pause();
    } else {
        currentSong.src = `./songs/${song.url}`;
        currentSong.play();
        currentlyPlayingElement = element;
    }
    updateUI(element, song.url);
};

// Initialize playlist and events
const main = async () => {
    const songs = await getSongs();
    const songList = document.querySelector(".songList ul");

    songs.forEach(song => {
        const li = document.createElement("li");
        li.innerHTML = `
            <img class="invert" width="34" src="music.svg" alt="">
            <div class="info">
                <div>${song.name}</div>
                <div>${song.artist}</div>
            </div>
            <div class="playnow">
                <span>Play Now</span>
                <img src="play.svg" alt="" class="invert">
            </div>
        `;
        li.addEventListener("click", () => togglePlayback(song, li));
        songList.appendChild(li);
    });

    // Global play/pause button
    document.querySelector("#play").addEventListener("click", () => {
        if (currentlyPlayingElement) {
            currentSong.paused ? currentSong.play() : currentSong.pause();
            updateUI(currentlyPlayingElement, currentSong.src.split("/songs/")[1]);
        }
    });

    // listen for timeupdate event
    currentSong.addEventListener("timeupdate", ()=>{
        console.log(currentSong.currentTime, currentSong.duration);
        document.querySelector(".songtime").innerHTML = `${secondsToMinutesSeconds(currentSong.currentTime)}
        /${secondsToMinutesSeconds(currentSong.duration)}`
    });
};

main();
